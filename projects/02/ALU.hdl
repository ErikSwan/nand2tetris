// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Create inverted copies of `x` and  `y`
    Not16(in=x, out=NotX);
    Not16(in=y, out=NotY);

    // Select the processed `x` and `y` inputs based on `nx`, `zx`, `ny`, and `zy`
    Mux4Way16(a=x, b=NotX, c=false, d=true, sel[0]=nx, sel[1]=zx, out=ProcX);
    Mux4Way16(a=y, b=NotY, c=false, d=true, sel[0]=ny, sel[1]=zy, out=ProcY);

    // Compute `x+y` and `x&y` (where `x` and `y` are the processed versions)
    Add16(a=ProcX, b=ProcY, out=AddXY);
    And16(a=ProcX, b=ProcY, out=AndXY);

    // Select `x+y` or `x&y` based on `f`
    Mux16(a=AndXY, b=AddXY, sel=f, out=CompXY);

    // Produce an inverted version of the output
    Not16(in=CompXY, out=NotCompXY);

    // Select between the inverted and non-inverted output based on `no`
    // We can also compute the `ng` status bit here by wiring the MSB of `out` to `ng`
    Mux16(a=CompXY, b=NotCompXY, sel=no, out[0..7]=Out0t07, out[8..15]=Out8to15, out=out, out[15]=ng);

    // Compute the `zr` status bit
    // zr = 1 iff out = 0000 0000 0000 0000
    Or8Way(in=Out0t07, out=Or0to7);
    Or8Way(in=Out8to15, out=Or8to15);
    Or(a=Or0to7, b=Or8to15, out=Or0to15);
    Not(in=Or0to15, out=zr);
}